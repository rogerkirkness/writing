# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    outputs:
      should-build-pdf: ${{ steps.check-pdf.outputs.should-build-pdf }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check if PDF should be built
        id: check-pdf
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[pdf]"* ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-build-pdf=true" >> $GITHUB_OUTPUT
          else
            echo "should-build-pdf=false" >> $GITHUB_OUTPUT
          fi
            
      - name: Setup Ruby
        uses: ruby/setup-ruby@086ffb1a2090c870a3f881cc91ea83aa4243d408 # v1.195.0
        with:
          ruby-version: '3.3.8' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 1 # Increment this number if you need to re-download cached gems
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          
      - name: Upload Jekyll artifact
        uses: actions/upload-pages-artifact@v3
        
  # PDF Generation job (runs conditionally)
  pdf:
    if: needs.build.outputs.should-build-pdf == 'true'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/jekyll.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-
            
      - name: Install Pandoc and LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex
          
      - name: Create PDF directory
        run: mkdir -p pdf
        
      - name: Set Execution Permissions for Script
        run: chmod +x scripts/preprocess.sh
        
      - name: Run Preprocess Script
        run: ./scripts/preprocess.sh
        
      - name: Convert Markdown to PDF
        run: |
          pandoc pdf/combined.md -o pdf/book.pdf --pdf-engine=xelatex \
          -V geometry:"paperwidth=5.5in,paperheight=8.5in,margin=0.75in" \
          -V linestretch=1.5 --toc --toc-depth=2  \
          -H <(echo '\usepackage{graphicx}')
          
      - name: Upload PDF to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ESSAYS by ROGER KIRKNESS
          path: pdf/book.pdf
          
      - name: Download Jekyll artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: _site-temp
          
      - name: Extract and add PDF to site
        run: |
          cd _site-temp
          tar -xf artifact.tar
          cp ../pdf/book.pdf .
          tar -cf ../artifact-with-pdf.tar .
          cd ..
          
      - name: Upload combined artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site-temp
        
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, pdf]
    if: always() && (needs.build.result == 'success')
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
